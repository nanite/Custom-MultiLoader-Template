plugins {
    id 'fabric-loom' version '1.3-SNAPSHOT' apply(false)
    id 'net.neoforged.gradle.userdev' version '[7.0.57,)' apply(false)
    id "org.spongepowered.mixin" version "${mixin_version}" apply(false)
    id "me.modmuss50.mod-publish-plugin" version "0.4.5"
}

ext.isSnapshot = providers.environmentVariable("SNAPSHOT").map { it == "true" }.getOrElse(false)

allprojects {
    version = "${mod_version}+mc${minecraft_version}${isSnapshot ? '-SNAPSHOT' : ''}"
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    base {
        archivesName = "${mod_name}-${project.name}"
    }

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    java.withSourcesJar()

    jar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_name}" }
        }
        manifest {
            attributes([
                    'Specification-Title'     : mod_name,
                    'Specification-Vendor'    : mod_author,
                    'Specification-Version'   : project.jar.archiveVersion,
                    'Implementation-Title'    : project.name,
                    'Implementation-Version'  : project.jar.archiveVersion,
                    'Implementation-Vendor'   : mod_author,
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    'Timestamp'               : System.currentTimeMillis(),
                    'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                    'Built-On-Minecraft'      : minecraft_version
            ])
        }
    }

    sourcesJar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_name}" }
        }
    }

    repositories {
        mavenCentral()
    }

    tasks.withType(JavaCompile).configureEach {

        it.options.encoding = 'UTF-8'
        it.options.getRelease().set(17)
    }

    processResources {
        filesMatching(['pack.mcmeta', 'fabric.mod.json', 'META-INF/mods.toml', 'mods.toml', '*.mixins.json']) {
            expand project.properties
        }
    }

    // Disables Gradle's custom module metadata from being published to maven. The
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata).configureEach {

        enabled = false
    }

    publishing {
        repositories {
            if (providers.environmentVariable("MAVEN_TOKEN").orNull) {
                maven {
                    url "${maven_url}${isSnapshot ? 'snapshots' : 'releases'}"
                    credentials {
                        username = "admin"
                        password = providers.environmentVariable("MAVEN_TOKEN").get()
                    }
                }
            }
        }
    }
}

publishMods {
    dryRun = providers.environmentVariable("CURSE_TOKEN").getOrNull() == null
    changelog = file("./CHANGELOG.md").text
    version = "${mod_version}"
    type = STABLE

    def fabricOptions = publishOptions {
        file = project.provider { project(":fabric").tasks.remapJar }.flatMap { it.archiveFile }
        displayName = "${project.name} Fabric ${mod_version}+mc${minecraft_version}"
        modLoaders.add("fabric")
    }

    def forgeOptions = publishOptions {
        file = project.provider { project(":forge").tasks.jar }.flatMap { it.archiveFile }
        displayName = "${project.name} Forge ${mod_version}+mc${minecraft_version}"
        modLoaders.add("forge")
    }

    def neoOptions = publishOptions {
        file = project.provider { project(":neoforge").tasks.jar }.flatMap { it.archiveFile }
        displayName = "${project.name} NeoForged ${mod_version}+mc${minecraft_version}"
        modLoaders.add("neoforge")
    }

    def curseForgeOptions = curseforgeOptions {
        accessToken = providers.environmentVariable("CURSE_TOKEN")
        projectId = "${curseforge_id}"
        minecraftVersions.add("${minecraft_version}")
    }

    def modrinthOptions = modrinthOptions {
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        projectId = "${modrinth_id}"
        minecraftVersions.add("${minecraft_version}")
    }

    curseforge("curseforgeFabric") {
        from(curseForgeOptions, fabricOptions)
        requires {
            slug = "fabric-api"
        }
    }

    curseforge("curseforgeForge") {
        from(curseForgeOptions, forgeOptions)
    }

    curseforge("curseforgeNeo") {
        from(curseForgeOptions, neoOptions)
    }

    modrinth("modrinthFabric") {
        from(modrinthOptions, fabricOptions)
        requires {
            slug = "fabric-api"
        }
    }

    modrinth("modrinthForge") {
        from(modrinthOptions, forgeOptions)
    }

    modrinth("modrinthNeo") {
        from(modrinthOptions, neoOptions)
    }

    github {
//        file = project.provider { project(":forge").tasks.jar }.flatMap { it.archiveFile }
        file = project.provider { project(":neoforge").tasks.jar }.flatMap { it.archiveFile }
        additionalFiles.from project.provider { project(":fabric").tasks.remapJar }.flatMap { it.archiveFile }
        repository = "${github_repo}"
        accessToken = providers.environmentVariable("GITHUB_TOKEN")
        commitish = providers.environmentVariable("GITHUB_SHA").orElse("dryRun")
    }
}